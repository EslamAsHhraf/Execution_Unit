// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/15/2021 15:12:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ExecutionUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ExecutionUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [9:0] Input;
// wires                                               
wire [3:0] Aot;
wire [3:0] Bot;
wire [3:0] cot;
wire [3:0] ot;

// assign statements (if any)                          
ExecutionUnit i1 (
// port map - connection between master ports and signals/registers   
	.Aot(Aot),
	.Bot(Bot),
	.clk(clk),
	.cot(cot),
	.\Input (Input),
	.ot(ot)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	# 50000;
	repeat(8)
	begin
		clk = 1'b0;
		clk = #50000 1'b1;
		# 50000;
	end
	clk = 1'b0;
	clk = #50000 1'b1;
end 
// \Input [ 9 ]
initial
begin
	Input[9] = 1'b1;
	Input[9] = #100000 1'b0;
	Input[9] = #100000 1'b1;
	Input[9] = #100000 1'b0;
end 
// \Input [ 8 ]
initial
begin
	Input[8] = 1'b1;
	Input[8] = #100000 1'b0;
	Input[8] = #400000 1'b1;
	Input[8] = #200000 1'b0;
end 
// \Input [ 7 ]
initial
begin
	Input[7] = 1'b1;
	Input[7] = #300000 1'b0;
	Input[7] = #200000 1'b1;
	Input[7] = #200000 1'b0;
end 
// \Input [ 6 ]
initial
begin
	Input[6] = 1'b1;
	Input[6] = #100000 1'b0;
end 
// \Input [ 5 ]
initial
begin
	Input[5] = 1'b0;
	Input[5] = #300000 1'b1;
	Input[5] = #500000 1'b0;
end 
// \Input [ 4 ]
initial
begin
	Input[4] = 1'b0;
	Input[4] = #300000 1'b1;
	Input[4] = #300000 1'b0;
end 
// \Input [ 3 ]
initial
begin
	Input[3] = 1'b1;
	Input[3] = #300000 1'b0;
	Input[3] = #100000 1'b1;
	Input[3] = #400000 1'b0;
end 
// \Input [ 2 ]
initial
begin
	Input[2] = 1'b1;
	Input[2] = #400000 1'b0;
	Input[2] = #100000 1'b1;
	Input[2] = #200000 1'b0;
	Input[2] = #100000 1'b1;
	Input[2] = #100000 1'b0;
end 
// \Input [ 1 ]
initial
begin
	Input[1] = 1'b0;
	Input[1] = #200000 1'b1;
	Input[1] = #200000 1'b0;
	Input[1] = #200000 1'b1;
	Input[1] = #100000 1'b0;
	Input[1] = #100000 1'b1;
	Input[1] = #100000 1'b0;
end 
// \Input [ 0 ]
initial
begin
	Input[0] = 1'b0;
	Input[0] = #100000 1'b1;
	Input[0] = #100000 1'b0;
	Input[0] = #300000 1'b1;
	Input[0] = #100000 1'b0;
	Input[0] = #100000 1'b1;
	Input[0] = #100000 1'b0;
end 
endmodule

