// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2021 10:44:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] comm;
reg pin_name1;
// wires                                               
wire [3:0] Aout;
wire [3:0] Bout;
wire [3:0] Cout;
wire [3:0] out;

// assign statements (if any)                          
EU i1 (
// port map - connection between master ports and signals/registers   
	.Aout(Aout),
	.Bout(Bout),
	.comm(comm),
	.Cout(Cout),
	.out(out),
	.pin_name1(pin_name1)
);
initial 
begin 
#1000000 $finish;
end 
// comm[ 9 ]
initial
begin
	comm[9] = 1'b1;
end 
// comm[ 8 ]
initial
begin
	comm[8] = 1'b1;
end 
// comm[ 7 ]
initial
begin
	comm[7] = 1'b0;
end 
// comm[ 6 ]
initial
begin
	comm[6] = 1'b1;
end 
// comm[ 5 ]
initial
begin
	comm[5] = 1'b0;
end 
// comm[ 4 ]
initial
begin
	comm[4] = 1'b0;
end 
// comm[ 3 ]
initial
begin
	comm[3] = 1'b0;
	comm[3] = #10000 1'b1;
	comm[3] = #480000 1'b0;
end 
// comm[ 2 ]
initial
begin
	comm[2] = 1'b0;
	comm[2] = #10000 1'b1;
	comm[2] = #480000 1'b0;
end 
// comm[ 1 ]
initial
begin
	comm[1] = 1'b1;
	comm[1] = #330000 1'b0;
end 
// comm[ 0 ]
initial
begin
	comm[0] = 1'b1;
	comm[0] = #200000 1'b0;
end 

// pin_name1
always
begin
	pin_name1 = 1'b0;
	pin_name1 = #20000 1'b1;
	#20000;
end 
endmodule

